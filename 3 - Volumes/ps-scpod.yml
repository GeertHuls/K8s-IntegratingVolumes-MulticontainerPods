apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-htmlvol # This pvc refers the to ps-sc.yml storage class!
spec:
  storageClassName: "ps-gcp-fast"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 25Gi # This is now dynamically bound to the storage class whereas
                    # the storage class will create this on the spot (cfr WaitForFirstConsumer binding).
                    # The ps-pv.yml is statically bound (known upfront).
---
apiVersion: v1
kind: Pod
metadata:
  name: sc-pod
  labels:
    app: stg
spec:
  volumes:
    - name: htmlvol # The pod is creating a volume based on the pvc above.
      persistentVolumeClaim:
        claimName: pvc-htmlvol
  containers:
    - name: main-ctr
      image: nginx
      ports:
        - containerPort: 80
          name: "http-server"
      volumeMounts: # The container mounts the volume on the pod.
        - mountPath: "/usr/share/nginx/html"
          name: htmlvol # Refers to the name of the pod volume.
    - name: helper-ctr
      image: ubuntu
      command:
      - /bin/bash
      - "-c"
      - "sleep 60m"
      volumeMounts: # Here's the second container mounting the volume on the pod.
      - mountPath: /data
        name: htmlvol # Refers to the name of the pod volume.
      # This is an example of a ReadWriteOnce PVC allows as many containers as you like to use it,
      # as long as it is in the same pod.
      # On the other hand, multiple pods are not able to use this PVC.
---
apiVersion: v1
kind: Service # This service is used to expose it to the internet.
metadata:
  name: lb
spec:
  selector:
    app: stg
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer

# Inspect the pod:
# kubectl describe pod sc-pod
# Open bash prompt in running container:
# kubectl exec -it sc-pod -c helper-ctr /bin/bash


